# server
server.port=8888
management.port=7008
#最大工作线程数，默认200
server.tomcat.threads.max=800
#服务器最大连接数，默认8192
server.tomcat.max-connections=10000
## 等待队列长度，默认100
server.tomcat.accept-count=1000
## 最小工作空闲线程数，默认10。（适当增大一些，以便应对突然增长的访问量）
server.tomcat.threads.min-spare=100
server.tomcat.connection-timeout=5000

#kafka服务地址
spring.kafka.bootstrap-servers=localhost:9092
#序列化
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
# Kafka反序列化
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#topic
spring.kafka.consumer.group-id=test
#失败重试次数；当leader失效，一个repli节点会替代成为leader节点，此时可能出现写入失败 当retris为0时，produce不会重复。retirs重发，此时repli节点完全成为leader节点，不会产生消息丢失。
spring.kafka.producer.retries=0
#acks = 0 如果设置为零，则生产者将不会等待来自服务器的任何确认，该记录将立即添加到套接字缓冲区并视为已发送。在这种情况下， 无法保证服务器已收到记录，并且重试配置将不会生效（因为客户端通常不会知道任何故障），为每条记录返回的偏移量始终设置为-1。
#acks = 1 这意味着leader会将记录写入其本地日志，但无需等待所有副本服务器的完全确认即可做出回应，在这种情况下，如果leader在确认记录后 立即失败，但在将数据复制到所有的副本服务器之前，则记录将会丢失。
#acks = all 这意味着leader将等待完整的同步副本集以确认记录，这保证了只要至少一个同步副本服务器仍然存活，记录就不会丢失，这是最强有力的保证，这相当于acks = -1的设置。
#可以设置的值为：all, -1, 0, 1
spring.kafka.producer.acks=1
#每次批量发送消息的数量,produce积累到一定数据，一次发数据量，这有助于提升客户端和服务器端的性能；16384是缺省的配置（16K）
spring.kafka.producer.batch-size=16384
#缓存大小达到buffer.memory就发送数据，用来缓冲等待被发送到服务器的记录的总字节数，33554432是缺省配置
spring.kafka.producer.buffer-memory=33554432
#是否自动提交offset
spring.kafka.consumer.enable-auto-commit=true
#如果'enable.auto.commit'为true，则消费者偏移自动提交给Kafka的频率（以毫秒为单位），默认值为5000。
spring.kafka.consumer.auto-commit-interval=100
# 当kafka中没有初始offset或offset超出范围时将自动重置offset
# earliest:重置为分区中最小的offset;
# latest:重置为分区中最新的offset(消费分区中新产生的数据);
# none:只要有一个分区不存在已提交的offset,就抛出异常;
spring.kafka.consumer.auto-offset-reset=latest
#debug=true
# logging
logging.config=classpath:log4j2.xml
logging.file.name=logs/security.log
#database config
spring.datasource.url=jdbc:mysql://localhost:3306/test?tinyInt1isBit=true&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true&serverTimezone=Asia/Shanghai&useSSL=false
spring.datasource.username=root
spring.datasource.password=root123
spring.datasource.initialize=false
spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
spring.datasource.hikari.connection-test-query=select 1
spring.datasource.hikari.maximum-pool-size=100
spring.datasource.hikari.min-idle=10
spring.datasource.hikari.max-lifetime=30000
#database config
#spring.datasource.url=jdbc:log4jdbc:oracle:thin:@172.16.230.90:1521:stupor
#spring.datasource.username=xd_zx
#spring.datasource.password=123456
#spring.datasource.driverClassName=net.sf.log4jdbc.DriverSpy
#spring.datasource.test-on-borrow= false
#spring.datasource.test-on-return= false
#spring.datasource.test-while-idle= true
#jpa config
spring.jpa.database=MYSQL
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
#redis config
spring.redis.database=0
spring.redis.port=6379
spring.redis.host=localhost
spring.redis.password=root123
#disable useless endpoints
security.basic.enabled=false
management.security.enabled=false
endpoints.autoconfig.enabled=true
endpoints.beans.enabled=false
endpoints.configprops.enabled=false
endpoints.mappings.enabled=true
endpoints.trace.enabled=false
endpoints.health.enabled=true
#endpoints.shutdown.enabled=true
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp
#connection
security.oauth2.accessToken=http://localhost:8888/oauth2/rest_token?client_id={}&response_type=code&grant_type={}&scope=read
security.oauth2.refreshToken=http://localhost:8888/oauth2/token?client_id={}&client_secret={}&grant_type={}&refresh_token={}
